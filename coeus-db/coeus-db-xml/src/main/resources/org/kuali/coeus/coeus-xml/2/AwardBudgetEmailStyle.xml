<?xml version="1.0" encoding="UTF-8"?>
<data xmlns="ns:workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="ns:workflow resource:WorkflowData">
    <styles xmlns="ns:workflow/Style" xsi:schemaLocation="ns:workflow/Style resource:Style">
        <style name="kc.awardbudget.email.style">
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:strip-space elements="*"/>

    <!-- "Muenchian" method of grouping: http://www.jenitennison.com/xslt/grouping/muenchian.html -->
    <!-- this is a map of document type names to nodesets -->
    <xsl:key name="doctypes-by-name" match="summarizedActionItem" use="docName"/>

    <xsl:template match="immediateReminder">
        <xsl:variable name="docHandlerUrl" select="actionItem/actionItem/docHandlerURL"/>
        <xsl:variable name="actionRequestCd" select="actionItem/actionItem/actionRequestCd"/>
        <xsl:variable name="actionRequestCodeDesc">
            <xsl:choose>
                <xsl:when test="$actionRequestCd = 'K'">
                    <xsl:value-of select="'ACKNOWLEDGE'" />
                </xsl:when>
                <xsl:when test="$actionRequestCd = 'A'">
                    <xsl:value-of select="'APPROVE'" />
                </xsl:when>
                <xsl:when test="$actionRequestCd = 'F'">
                    <xsl:value-of select="'FYI'" />
                </xsl:when>
                <xsl:when test="$actionRequestCd = 'C'">
                    <xsl:value-of select="'COMPLETE'" />
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="'N/A'" />
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="title" select="actionItem/actionItem/docTitle"/>
        <email>
            <subject>Kuali Research Action - Award Budget - <xsl:value-of select="$actionRequestCodeDesc"/> - Document Description: <xsl:value-of select="$title"/></subject>
            <body><![CDATA[<html>]]>Please complete the <xsl:value-of select="$actionRequestCodeDesc"/> action in Award Budget for "<xsl:value-of select="$title"/>"
Your timely action is requested.
Failure to act when an <i>approval</i> is requested will stop routing.

To review the requested action: <![CDATA[<a href="]]><xsl:value-of select="$docHandlerUrl"/><xsl:choose>
  <xsl:when test="contains($docHandlerUrl, '?')">&amp;</xsl:when>
  <xsl:otherwise>?</xsl:otherwise>
</xsl:choose>docId=<xsl:value-of select="actionItem/actionItem/documentId"/>&amp;command=displayActionListView<![CDATA[">]]>Document #<xsl:value-of select="actionItem/actionItem/documentId"/><![CDATA[</a>]]>
<xsl:value-of select="$docHandlerUrl"/><xsl:choose>
  <xsl:when test="contains($docHandlerUrl, '?')">&amp;</xsl:when>
  <xsl:otherwise>?</xsl:otherwise>
</xsl:choose>docId=<xsl:value-of select="actionItem/actionItem/documentId"/>&amp;command=displayActionListView

Or, to see all actions requested: <![CDATA[<a href="]]><xsl:value-of select="@actionListUrl"/><![CDATA[">]]>Action List<![CDATA[</a>]]>
<xsl:value-of select="@actionListUrl"/>, and then click on the numeric Document ID: <xsl:value-of select="actionItem/actionItem/documentId"/> in the first column of the List.

<xsl:if test="@env != 'prd'">
Action Item sent to <xsl:value-of select="actionItem/actionItemPrincipalName"/>
<xsl:if test="string(actionItem/actionItem/delegationType)">
 for delegate type <xsl:value-of select="actionItem/actionItem/delegationType"/>
</xsl:if>
</xsl:if><![CDATA[</html>]]></body>
        </email>
    </xsl:template>

    <xsl:template match="dailyReminder">
        <email>
            <subject>Action List Reminder</subject>
            <body>Your Action List has <xsl:value-of select="count(summarizedActionItem)"/> eDocs(electronic documents) that need your attention:
<!-- "Muenchian" method of grouping: http://www.jenitennison.com/xslt/grouping/muenchian.html
     this clever little expression ensures that we only match the FIRST node
     for which there is a name-to-nodeset mapping.  More specifically, we want
     to ensure that we only match ONCE, but the FIRST node is the best node
     to match ONCE (or at least it's as good as any other; depends on whether
     we want to preserve relative ordering, etc.) -->
<xsl:for-each select="summarizedActionItem[count(. | key('doctypes-by-name', docName)[1]) = 1]">
    <!-- the xsl:sort modifies the for-each selection order (I think) -->
    <!-- <xsl:sort select="name" /> -->
    <!-- sort by count -->
    <!-- the order of identical values will be arbitrary in the Java map-based implementation;
         switching this to desceding here because 1) it seems more useful for a user and
         2) I want the unit test to pass, and given that it only uses two doc types, reversing
         the order will make it match the literal output of the Java version ;) -->
    <xsl:sort data-type="number" select="count(key('doctypes-by-name', docName))" order="descending"/>
<xsl:text>&#x9;</xsl:text><xsl:value-of select="count(key('doctypes-by-name', docName))"/><xsl:text>&#x9;</xsl:text><xsl:value-of select="docName"/><xsl:text>&#xa;</xsl:text>
</xsl:for-each>

To respond to each of these eDocs:
&#x9;Go to <xsl:value-of select="@actionListUrl"/>, and then click on its numeric Document ID in the first column of the List.



To change how these email notifications are sent (immediately, weekly or none):
&#x9;Go to <xsl:value-of select="@preferencesUrl"/>



For additional help, email <![CDATA[<mailto:]]><xsl:value-of select="@applicationEmailAddress"/><![CDATA[>]]>


</body>
        </email>
    </xsl:template>

    <xsl:template match="weeklyReminder">
        <email>
            <subject>Action List Reminder</subject>
            <body>Your Action List has <xsl:value-of select="count(summarizedActionItem)"/> eDocs(electronic documents) that need your attention:
<!-- "Muenchian" method of grouping: http://www.jenitennison.com/xslt/grouping/muenchian.html
     this clever little expression ensures that we only match the FIRST node
     for which there is a name-to-nodeset mapping.  More specifically, we want
     to ensure that we only match ONCE, but the FIRST node is the best node
     to match ONCE (or at least it's as good as any other; depends on whether
     we want to preserve relative ordering, etc.) -->
<xsl:for-each select="summarizedActionItem[count(. | key('doctypes-by-name', docName)[1]) = 1]">
    <!-- the xsl:sort modifies the for-each selection order (I think) -->
    <!-- <xsl:sort select="name" /> -->
    <!-- sort by count -->
    <!-- the order of identical values will be arbitrary in the Java map-based implementation;
         switching this to desceding here because 1) it seems more useful for a user and
         2) I want the unit test to pass, and given that it only uses two doc types, reversing
         the order will make it match the literal output of the Java version ;) -->
    <xsl:sort data-type="number" select="count(key('doctypes-by-name', docName))" order="descending"/>
<xsl:text>&#x9;</xsl:text><xsl:value-of select="count(key('doctypes-by-name', docName))"/><xsl:text>&#x9;</xsl:text><xsl:value-of select="docName"/><xsl:text>&#xa;</xsl:text>
</xsl:for-each>

To respond to each of these eDocs:
&#x9;Go to <xsl:value-of select="@actionListUrl"/>, and then click on its numeric Document ID in the first column of the List.



To change how these email notifications are sent (immediately, daily or none):
&#x9;Go to <xsl:value-of select="@preferencesUrl"/>



For additional help, email <![CDATA[<mailto:]]><xsl:value-of select="@applicationEmailAddress"/><![CDATA[>]]>


</body>
        </email>
    </xsl:template>

    <xsl:template match="feedback">
        <email>
            <subject>Feedback from <xsl:value-of select="networkId"/>
              <xsl:variable name="documentId" select="documentId"/>
              <xsl:choose>
                <xsl:when test="string($documentId)"> for document <xsl:value-of select="$documentId"/></xsl:when>
              </xsl:choose>
            </subject>
            <body>
Network ID: <xsl:value-of select="networkId"/>
Name: <xsl:value-of select="userName"/>
Email: <xsl:value-of select="userEmail"/>
Phone: <xsl:value-of select="phone"/>
Time: <xsl:value-of select="timeDate"/>
Environment: <xsl:value-of select="@env"/>

Document type: <xsl:value-of select="documentType"/>
Document id: <xsl:value-of select="documentId"/>

Category: <xsl:value-of select="category"/>
Comments:
<xsl:value-of select="comments"/>

Exception:
<xsl:value-of select="exception"/>
            </body>
        </email>
    </xsl:template>
</xsl:stylesheet>
        </style>
    </styles>
</data>